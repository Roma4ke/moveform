<?php
/**
* Implement hook_menu().
*/

function movecalc_menu() {	
    
	$items['input/examples'] = array (
	'title' => 'Form API examples',
	'description' => 'Example of using the Form API.',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('movecalc_moving_form'),
	'access callback' => TRUE,
	);
	$items['input/examples/simple'] = array (
	'title' => 'Simple',
	'description' => 'Example of using page callback',
	'page callback' => 'movecalc_simple_page',
	'access callback' => TRUE,
	);
	return $items;
	} 

/** 
 * A simple form
*/
 function movecalc_moving_form($form,&$form_submit) {
 libraries_load('easing');
 drupal_add_js(drupal_get_path('module', 'movecalc') . '/pick_reate_popup.js');
 drupal_add_css(drupal_get_path('module', 'movecalc') . "/datepicker.css");
 
 
 // Calculator
  $form['calculator'] = array(
	'#title' => 'Moving Calculator',
	'#type' => 'fieldset',
  );   
   $form['calculator']['results'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<div id="calc-results"></div>',
	 );
  $form['calculator']['Move_Date'] = array(
   '#title' => t('Date of Move:'),
  '#type' => 'date_popup', // Provided by the date_popup module
  '#date_format' => 'j F Y', // Uses the PHP date() format - http://php.net/manual/en/function.date.php
  '#date_year_range' => 'now:+2', // Limits the year range to the next two upcoming years
   '#attributes' =>array('class' =>array('required')),
  );
	
	$form['calculator']['Zip_Code_From'] = array (
		'#title' => t('From Zip:'),
		'#type' => 'textfield',
		'#maxlength' => 5,
	     '#size' => 5,
		'#attributes' =>array('class' =>array('required')),
	 );
	  $form['calculator']['Zip_Code_To'] = array (
		'#title' => t('To Zip:'),
		'#type' => 'textfield',
		'#maxlength' => 5,
	     '#size' => 5,
		 '#attributes' =>array('class' =>array('required')),
	 );
	  
	 $form['calculator']['Size_Move'] = array (
		'#title' => t('Size of Move:'),
		'#type' => 'select',
		'#options' => array (
		 '' => t('Size of Move'),
		 '1' => t('One Room or less ( < 1000lbs)'),
		 '2' => t('Studio Apt.'),
		 '3' => t('Small 1 Bedroom Apt.'),
		 '4' => t('Large 1 Bedroom Apt.'),
		 '5' => t('Small 2 Bedroom Apt.'),
		 '6' => t('Large 2 Bedroom Apt.'),
		 '7' => t('3+ Bedroom Apt.'),
		 '8' => t('2 Bedroom House / Townhouses'),
		 '9' => t('3 Bedroom House / Townhouses'),
		 '10'=> t('4+ Bedroom House / Townhouses'),
		 ),
		 '#attributes' =>array('class' =>array('required')),
	 );
	  $form['calculator']['Extra_Furnished_Rooms'] = array (
		'#title' => t('Extra_Furnished_Rooms:'),
		'#type' => 'checkboxes',
		'#options' => array (
		 '1' => t('dining room'),
		 '2' => t('office'),
		 '3' => t('basement'),
		 '4' => t('garage'),
		 '5' => t('attic'),
		 '6' => t('shed'),
		 ),
		 '#states' => array(
		 'visible' => array(':input[name="Size_Move"]'=>array('value' => 4),
			),
		 ),
		 
	 );
	 $form['calculator']['Type_From'] = array (
		'#title' => t('Type of entrance (From):'),
		'#type' => 'select',
		'#options' => array (
		 '' => t('From Type'),
		 '1' => t('Private House'),
		 '2' => t('Elevator Building'),
		 '3' => t('Stairs 2nd Floor'),
		 '4' => t('Stairs 3nd Floor'),
		 '5' => t('Stairs 4nd Floor'),
		 '6' => t('Stairs 5nd or Higher'),
		 '7' => t('Storage Unit'),
		 ),
		 '#attributes' =>array('class' =>array('required')),
	 );
	 $form['calculator']['Type_To'] = array (
		'#title' => t('Type of entrance (To):'),
		'#type' => 'select',
		'#options' => array (
		 '' => t('To Type'),
		 '1' => t('Private House'),
		 '2' => t('Elevator Building'),
		 '3' => t('Stairs 2nd Floor'),
		 '4' => t('Stairs 3nd Floor'),
		 '5' => t('Stairs 4nd Floor'),
		 '6' => t('Stairs 5nd or Higher'),
		 '7' => t('Storage Unit'),
		 ),
		 '#attributes' =>array('class' =>array('required')),
	);
	
		$form['calculator']['calculate'] = array(
		 '#type' => 'button',
		 '#value' => 'Calculate >>',
		 '#attributes' =>array('class' =>array('calculate-btn')),
		  '#ajax' => array(
		  'callback' => 'movecalc_calculate_results',
		  'wrapper' => 'calc-results',
		  "effect" => "fade",
		),
		
		);
	
	//Calculator Result
	 $form['calculator_results'] = array(
	'#title' => 'Calculator Results',
	'#type' => 'fieldset',
	);
	 $form['calculator_results']['results'] = array (
	 '#type'=> 'markup',
	 '#markup' => '',
	 );
	 //buttons 
	  $form['calculator_results']['back_to_calculator_btn'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<input class="summery-btn form-submit button" type="submit" id="back-to-calc-btn" name="op" value="<< Back to Calculator">',
	 );
	 $form['calculator_results']['go_to_info_btn'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<input class="summery-btn form-submit button" type="submit" id="go-to-info-btn" name="op" value="Make a Request >>">',
	 );
	
     //Personal Info
	  $form['personal_info'] = array(
	'#title' => 'Persanol Information and Moving Details',
	'#type' => 'fieldset',
	);

	 $form['personal_info']['first_name'] = array (
	 '#title' => t('Contact information:'),
	 '#prefix' => '<div class="three_block">',
		'#type' => 'textfield',
		 '#size' => 15,
		 '#attributes' =>array('placeholder' => t('First Name'),'class' =>array('required')),
		 
	 );	 
	  $form['personal_info']['last_name'] = array (
		'#type' => 'textfield',
		 '#size' => 15,
		 '#attributes' =>array('placeholder' => t('Last Name'),'class' =>array('required')),
	 );
	  $form['personal_info']['primary_phone'] = array (
		'#type' => 'textfield',
		'#id' => 'primary_phone',
		 '#size' => 15,
		 '#attributes' =>array('placeholder' => t('Primary Phone'),'class' =>array('required')),
	 );
	   $form['personal_info']['additional_phone'] = array (
		'#type' => 'textfield',
		 '#size' => 15,
		 '#attributes' =>array('placeholder' => t('Additional Phone')),
	 );
	 $form['personal_info']['email'] = array(
		'#type' => 'textfield',
		'#attributes' =>array('placeholder' => t('Email'),'class' =>array('required')),
		'#default_value' => "",	
		'#size' => 20,
		'#maxlength' => 20,
		'#suffix' => '</div>',
		);
	
    
	 
	// Moving From
	$form['personal_info']['moving_from'] = array (
	'#prefix' => '<div class="three_block">',
	 '#title' => t('Moving From'),
		'#type' => 'textfield',
		 '#size' => 15,
		 '#attributes' =>array('placeholder' => t('From Address'),'class' =>array('required')),
	 );	 
	 $form['personal_info']['moving_from_apt'] = array (
		'#attributes' =>array('placeholder' => t('Apt')),
		'#type' => 'textfield',
		'#maxlength' => 5,
	     '#size' => 5,
	 );
	 $form['personal_info']['moving_from_zip'] = array (
		'#attributes' =>array('placeholder' => t('From Zip'),'class' =>array('required')),
		'#type' => 'textfield',
		'#maxlength' => 5,
	     '#size' => 5,
	 );
	  $form['personal_info']['moving_from_city'] = array (
		'#attributes' =>array('placeholder' => t('From City'),'class' =>array('required')),
		'#type' => 'textfield',
		
	 );
	 $form['personal_info']['moving_from_state'] = array (
		'#type' => 'select',
		'#options' => array(
	'' => t('Select State'),
	'AL' => t('Alabama'),
	'AK' => t('Alaska'),
	'AZ' => t('Arizona'),
	'AR' => t('Arkansas'),
	'CA' => t('California'),
	'CO' => t('Colorado'),
	'CT' => t('Connecticut'),
	'DE' => t('Delaware'),
	'DC' => t('District of Columbia'),
	'FL' => t('Florida'),
	'GA' => t('Georgia'),
	'HI' => t('Hawaii'),
	'ID' => t('Idaho'),
	'IL' => t('Illinois'),
	'IN' => t('Indiana'),
	'IA' => t('Iowa'),
	'KS' => t('Kansas'),
	'KY' => t('Kentucky'),
	'LA' => t('Louisiana'),
	'ME' => t('Maine'),
	'MD' => t('Maryland'),
	'MA' => t('Massachusetts'),
	'MI' => t('Michigan'),
	'MN' => t('Minnesota'),
	'MS' => t('Mississippi'),
	'MO' => t('Missouri'),
	'MY' => t('Montana'),
	'NE' => t('Nebraska'),
	'NV' => t('Nevada'),
	'NH' => t('New Hampshire'),
	'NJ' => t('New Jersey'),
	'NM' => t('New Mexico'),
	'NY' => t('New York'),
	'NC' => t('North Carolina'),
	'ND' => t('North Dakota'),
	'OH' => t('Ohio'),
	'OK' => t('Oklahoma'),
	'OR' => t('Oregon'),
	'PA' => t('Pennsylvania'),
	'RI' => t('Rhode Island'),
	'SC' => t('South Carolina'),
	'SD' => t('South Dakota'),
	'TN' => t('Tennessee'),
	'TX' => t('Texas'),
	'UT' => t('Utah'),
	'VT' => t('Vermont'),
	'VA' => t('Virginia'),
	'WA' => t('Washington'),
	'WV' => t('West Virginia'),
	'WI' => t('Wisconsin'),
	'WY' => t('Wyoming'),
	),
	'#suffix' => '</div>',
	);
	 
	 // Moving To 
	 
	 $form['personal_info']['moving_to'] = array (
	  '#prefix' => '<div class="three_block">',
	  '#title' => t('Moving To:'),
		'#type' => 'textfield',
		 '#size' => 15,
		 '#attributes' =>array('placeholder' => t('To Address'),'class' =>array('required')),
	 );
	  $form['personal_info']['moving_to_apt'] = array (
		'#attributes' =>array('placeholder' => t('Apt')),
		'#type' => 'textfield',
		'#maxlength' => 5,
	     '#size' => 5,
	 );
	  $form['personal_info']['moving_to_zip'] = array (
		'#attributes' =>array('placeholder' => t('To Zip'),'class' =>array('required')),
		'#type' => 'textfield',
		'#maxlength' => 5,
	     '#size' => 5,
	 );
	   $form['personal_info']['moving_to_city'] = array (
		'#attributes' =>array('placeholder' => t('To City'),'class' =>array('required')),
		'#type' => 'textfield',
	 );
	 $form['personal_info']['moving_to_state'] = array (
		'#type' => 'select',
		'#options' => array(
	'' => t('Select State'),
	'AL' => t('Alabama'),
	'AK' => t('Alaska'),
	'AZ' => t('Arizona'),
	'AR' => t('Arkansas'),
	'CA' => t('California'),
	'CO' => t('Colorado'),
	'CT' => t('Connecticut'),
	'DE' => t('Delaware'),
	'DC' => t('District of Columbia'),
	'FL' => t('Florida'),
	'GA' => t('Georgia'),
	'HI' => t('Hawaii'),
	'ID' => t('Idaho'),
	'IL' => t('Illinois'),
	'IN' => t('Indiana'),
	'IA' => t('Iowa'),
	'KS' => t('Kansas'),
	'KY' => t('Kentucky'),
	'LA' => t('Louisiana'),
	'ME' => t('Maine'),
	'MD' => t('Maryland'),
	'MA' => t('Massachusetts'),
	'MI' => t('Michigan'),
	'MN' => t('Minnesota'),
	'MS' => t('Mississippi'),
	'MO' => t('Missouri'),
	'MY' => t('Montana'),
	'NE' => t('Nebraska'),
	'NV' => t('Nevada'),
	'NH' => t('New Hampshire'),
	'NJ' => t('New Jersey'),
	'NM' => t('New Mexico'),
	'NY' => t('New York'),
	'NC' => t('North Carolina'),
	'ND' => t('North Dakota'),
	'OH' => t('Ohio'),
	'OK' => t('Oklahoma'),
	'OR' => t('Oregon'),
	'PA' => t('Pennsylvania'),
	'RI' => t('Rhode Island'),
	'SC' => t('South Carolina'),
	'SD' => t('South Dakota'),
	'TN' => t('Tennessee'),
	'TX' => t('Texas'),
	'UT' => t('Utah'),
	'VT' => t('Vermont'),
	'VA' => t('Virginia'),
	'WA' => t('Washington'),
	'WV' => t('West Virginia'),
	'WI' => t('Wisconsin'),
	'WY' => t('Wyoming'),
	),
	'#suffix' => '</div>',
	);
	 $form['personal_info']['clear_markup']= array (
	 '#type'=> 'markup',
	 '#markup' => '<div style="clear:both;"></div>',
	 );	
	 // additional info
	  $form['personal_info']['prefered_time'] = array (
	  '#prefix' => '<div class="three_block">',
		'#title' => t('Prefered Start Time:'),
		'#type' => 'select',
		'#options' => array (
		 '' => t('Any Time'),
		 '1' => t('Morning 7AM-10AM'),
		 '2' => t('Noon 11AM-4PM'),
		 '3' => t('Afternoon 3PM-7PM'),
		 ),
		
	);	
	 $form['personal_info']['alert_info']= array (
	 '#type'=> 'markup',
	 '#title' => t('Email'),
	 '#markup' => '<ul class="tooltip-info" style="padding:8px 50px 0 0;">
            <li><strong>Email </strong> <img src="../Content/img/alert.png" alt="Alert" style="vertical-align:text-bottom"><br>
        		Moved with us before? Please use the email you would provided with your previous move, so you can keep all your movings records together.</li>
        </ul>',
		'#suffix' => '</div>'
	 );	
	 // additinal comments
	 $form['personal_info']['comments_about_move'] = array (
	'#prefix' => '<div class="three2_block">',
	 '#title' => t('Additional Comments/Requests:'),
	 '#type' => 'textarea',
	
	 );	
	 $form['personal_info']['add_comments_info']= array (
	 '#type'=> 'markup',
	 '#markup' => '<p>Please include information on heavy, oversized or fragile items, narrow stairways or halls,
long walk ways, extra stops (including address), or anything else that may affect the
moving time.</p>',
	'#suffix' => '</div><div style="clear:both;"></div>',	
	 );	
	 //buttons 
	  $form['personal_info']['back_to_calendar_btn'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<input class="summery-btn form-submit button" type="submit" id="back-to-calendar-btn" name="op" value="<< Back to Calendar">',
	 );
	 $form['personal_info']['summery_btn'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<input class="summery-btn form-submit button" type="submit" id="go-to-summery-btn" name="op" value="Continue to Summery >>">',
	 );
	 
	 //*Summery
	   $form['summery'] = array(
	'#title' => 'Summery Review',
	'#type' => 'fieldset',
	);
	$form['summery']['summery_results'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<div id="summery_results"><div class="result_box"><p>Results sopposed to be here</p></div></div>',
	 );
	 //buttons 
	  $form['summery']['back_to_personal_info'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<input class="summery-btn form-submit button" type="submit" id="back-to-info-btn" name="op" value="<< Back to Details">',
	 );
	 $form['summery'] ['submit'] = array(
	 '#type' => 'submit',
	 '#value' => 'Submit Moving Request',
	  '#ajax' => array(
		  'callback' => 'movecalc_confirm_step',
		  'wrapper' => 'confirmation_block',
		),
	 );
	 //*Summery
	  $form['confirmation'] = array(
	'#title' => 'Confirmation',
	'#type' => 'fieldset',
	);
	$form['confirmation']['confirmation_message'] = array (
	 '#type'=> 'markup',
	 '#markup' => '<div id="confirmation_block"></div>',
	 );
	 
	 
	 // Get the path to the module
	$path = drupal_get_path('module', 'movecalc');
	// Attach the CSS and JS to the form
	$form['#attached'] = array
	(
		'css' => array
		(
			'type' => 'file',
			'data' => $path . '/form_theme.css',
		),
		'js' => array
		(
			'type' => 'file',
			'data' => $path . '/form_theme.js',
		),
	);
	 
    return $form;
 }

 /** 
*   Calculate Resulats Ajax Callback First Step
*/ 
 function movecalc_calculate_results($form,&$form_state){
 $error_string = '<div id="calc-results"><p>Please enter all required filds.They have been highlighted.</p></div>';
 $results['this'] = $form_state['clicked_button']['#attributes']['class'][0];
 drupal_add_js(array('validate' => $results), "setting");
 $date = $form_state['values']['Move_Date'];
   if(empty($date))
	 return $error_string;
 $zip_from = $form_state['values']['Zip_Code_From'];
	if(empty($zip_from))
	 return $error_string;
 $zip_to = $form_state['values']['Zip_Code_To'];
	if(empty($zip_to))
	 return $error_string;
 $move_size = $form_state['values']['Size_Move'];
	if(empty($move_size))
	 return $error_string;
 $type_to = $form_state['values']['Type_To'];
	if(empty($type_to))
	 return $error_string;
 $type_from = $form_state['values']['Type_From'];
	if(empty($type_from))
	 return $error_string;
 $extra_rooms = $form_state['values']['Extra_Furnished_Rooms'];	

 $Size_of_Move = $form_state['complete form']['calculator']['Size_Move']['#options'][$move_size];
 $Type_From = $form_state['complete form']['calculator']['Type_From']['#options'][$type_from];
 $Type_To = $form_state['complete form']['calculator']['Type_To']['#options'][$type_to];
 	  
	 //
	 //If No Error Contine with calculation and population result to next Step 
	 //
	 
	 // Get address and distance based on ZIPS
	$url = 'http://maps.googleapis.com/maps/api/directions/json?origin='.$zip_from.'&destination='.$zip_to.'&sensor=false';
	$result_string = file_get_contents($url);
	$decoded_json = json_decode($result_string,true);
	
	$from = $decoded_json['routes'][0]['legs'][0]['start_address'];
	$to = $decoded_json['routes'][0]['legs'][0]['end_address'];	 
	$distance = $decoded_json['routes'][0]['legs'][0]['distance']['text'];   //Distance from Zip To Zip
	$duration = round($decoded_json['routes'][0]['legs'][0]['duration']['value'] / 3600,1); // Apr. Driving Time. 
	
	$location_from = explode(',', $from, -1);
	$location_to = explode(',', $to, -1);
	$city_from = $location_from[0];
	$state_from = explode(' ', $location_from[1],-1);
	$city_to = $location_to[0];
	$state_to = explode(' ', $location_to[1],-1);
	

	$results = array(
	  'date' => $date,
	  'zip_from' => $zip_from,
	  'zip_to' =>$zip_to,
	  'city_from' => $city_from,
	  'state_from'=> $state_from[1],
	  'city_to'=> $city_to,
	  'state_to' => $state_to[1],
	  'step' => 'Calculate >>',
	  'this' =>$form_state['clicked_button']['#attributes']['class'][0],
	  );	
	drupal_add_js(array('calculator' => $results), "setting");
	
	
	//* 
	///SHOW CALCULATE RESULTS HERE 
	$view = views_get_view('move_time_table');
			$args = array($move_size,$type_from,$type_to);
			
			$view->set_display('page');	
			$view->pre_execute($args);			
			$view->execute();
			$info_box = '';
			foreach ($view->result AS $i => $result) {	
			   		//dsm($result);
			    $crew = $result->field_field_movers[0]['raw']['value'];
			    $min_time = $result->field_field_time_appr[0]['raw']['value'];
			    $max_time = $result->field_field_max_time[0]['raw']['value'];
			    $truck = $result->field_field_truck[0]['rendered']['#markup'];
			
				$price = movecalc_get_price($date,$crew);
				$total_min_time = $min_time  + $duration;
				$total_max_time = $max_time  + $duration;
	
				$viewDate = date("l, M j",strtotime($date));
				$info_box = $info_box.'<div class="calendarBox">
				<div class="box_info calendar_box">
				<h3 class="crew"><label>'.$crew.'</label> Movers crew</h3>
				<h5 class="truck">'.$truck.'</h5>
				</div>
				<div class="calendar_box">
				<div class="time-label"><h2>'.$total_min_time .'-'.$total_max_time.' <span>hours</span> </h2></div>	
				</div>
				<div class="calendar_box">
				<div class="time-label"><h2>'.$total_min_time*$price.'$-'.$total_max_time*$price.'$</h2></div>	
				</div>
	
				<div class="calendar_box">
				<div class="calendar_date"><h3>'.$viewDate.'</h3></div>
				</div>
				</div>
				<div style="clear:both;"></div>
				
				<button class="summery-btn form-submit button button--primary" type="submit" id="go-calculator-results-btn">Make Request &gt;&gt;</button> 
				</div>
				';
			}
			$view->destroy();	
	
	 $output = '<div id="calc-results"><div class="results-description"><p>Moving of '.$Size_of_Move.' with basement 
	 from '.$from.' to '.$to.' (distance: '.$distance.') from '.$Type_From.', 
	 to '.$Type_To.'	 should take approximately:</p>
	 </div>';
	 
	 $output = $output.$info_box;
 
 }
 
/**
 *  Define Theme Function for Form
 */
 function movecalc_theme()
{
	return array
	(
		'movecalc_moving_form' => array
		(
			'render element' => 'form'
		),
	);
}

 /** 
*   Theme Function
*/ 
 
 function theme_movecalc_moving_form($variables)
{
	// Isolate the form definition form the $variables array
	$form = $variables['form'];
	$output = '<ul id="progressbar">
		<li>Moving Calculator</li>
		<li>Calculator Result</li>
		<li>Personal Details</li>
		</ul>';
	$output .= drupal_render_children($form);
	// return the output
	return $output;
}
 /**
 *Page embedding a form on a page
 */
  function movecalc_simple_page() {
	$build = array (
	'header_text' => array(
	'#type' => 'markup',
	'#markup' => '<p>' . t('To add additinal content to a form page.').'</p>',
	),
	'example_form' => drupal_get_form('movecalc_moving_form'),
	);
	return $build;
	}
	

 /**
  * Submint function
 */
 function movecalc_confirm_step($form,&$form_state){
     $date = $form_state['values']['Move_Date'];
	$zip_from = $form_state['values']['Zip_Code_From'];
	$zip_to = $form_state['values']['Zip_Code_To'];
	$move_size = $form_state['values']['Size_Move'];
	$type_to = $form_state['values']['Type_To'];
	$type_from = $form_state['values']['Type_From'];
	$extra_rooms = $form_state['values']['Extra_Furnished_Rooms'];	

	$results = array(
	  'step' => '',
	  'this' =>''
	  );
	$results['step'] = 'Confirm';
	$results['this'] = $form_state['clicked_button']['#attributes']['class'][0];
	

	
	
	
	
	drupal_add_js(array('calculator' => $results), "setting");
	
	$output = '<div id="confirmation_block">Thank You!<h2>Your Moving Request has been Submitted.</h2> Weve sent you an email with all details regarding your request.
In the meantime, the Confirmation Number above confirms that the system has received your request. The current status of your reservation is "Requested". We will contact you shortly to confirm your Moving Request, discuss all details and finalize, date and time of the move! If you have any question, please do not hesitate to contact our office at 617-319-5700.
NOTE: Some email servers like HOTMAIL and GMAIL can forward Confirmation email to BULK folder.</div>';
	 
	
	 return $output;
	
   }
   
  
  /*** 
 *    Get Price Function
***/
	function movecalc_get_price($date,$movers) {
		$view = views_get_view('price_table');
			$peak = movecalc_peak_date($date);
			$args = array($peak,$movers);
			$view->set_display('page');
			$view->set_arguments($args);
			$view->pre_execute($args);			
			$view->execute();
			foreach ($view->result AS $i => $result) {	
			 $price = $result->field_field_price[0]['raw']['value'];				
			}
		$view->destroy();
	
		return $price;
	
	}

 /*** 
 *    Date Price Calc
***/
function movecalc_peak_date($mydate) {
	$peak = '';
	$month = date("n",strtotime($mydate));
	$day = date('d',strtotime($mydate));
	$dw = date( "w", strtotime($mydate));
	

	if($dw == 0) { //if sunday
		$peak = 4;
	}elseif($dw == 5 || $dw == 6 || $day == 30 || $day == 31 || $day == 29 || $day == 28 ) { //if friday or saturday
	    $peak = 3;
	}else
	  $peak = 2;
	 
	return $peak;
}
//* Create Node Moving Request *//
function movecalc_create_request(){
	global $user;
		// Create an Entity with wrapper
	$node = entity_create('node', array('type' => 'move_request'));
	$entity = entity_metadata_wrapper('node',  $node);
	$node->language = LANGUAGE_NONE;
	// Add a node title
	$entity->title = "Move Request on ".$date;
	 
	 
	  // Moving From address information
	  $entity->field_moving_from->thoroughfare = "asdfasdf";
	  $entity->field_moving_from->locality = "Misk";
	  $entity->field_moving_from->administrative_area = "NJ";
	  $entity->field_moving_from->postal_code = 07304;
	  $entity->field_moving_from->country = "US";
	 
	  // Moving To address information
	  $entity->field_moving_to->thoroughfare = "asdfasdf";
	  $entity->field_moving_to->locality = "Misk";
	  $entity->field_moving_to->administrative_area = "NJ";
	  $entity->field_moving_to->postal_code = 07304;
	  $entity->field_moving_to->country = "US";
	  
	  //Info
	  $entity->field_first_name->set("Raman");
	$entity->field_last_name->set("Guru");
	$entity->field_e_mail->set("roma4ke@gmail.com"); // mail
	$entity->field_phone->set(2016808055);  // phone
	$entity->field_additional_phone->set(2016807055);  // aditionalphone
	//date
	$node->field_date['und'][0]['value'] = $date;  // Date of Move
	$entity->field_start_time->set(2); // Start Time
	// Move Info
	$entity->field_price_per_hour->set(144); //Price per Hour
	$entity->field_estimated_price->set(2); // Estimated Price
	$entity->field_size_of_move->set(2); // Size of Move
	$entity->field_type_of_entrance_from->set(2);  // Type of Entrance From
	$entity->field_type_of_entrance_to_->set(1);  // Type of Entrance To
	$entity->field_truck->set(2);  //  Type of Truck
	$entity->field_movers_count->set(2);  // Size of Crew
	$entity->field_additional_comments->set("lasjdf;lakjdf;alskjdf");  // Additional comments
	
	  // Save the entity
	  $entity->save();
	
	//*End
}
